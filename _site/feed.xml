<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Things that make my head hurt</title>
    <description></description>
    <link>http://0.0.0.0:4000/</link>
    <atom:link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 10 Sep 2014 07:13:36 +0100</pubDate>
    <lastBuildDate>Wed, 10 Sep 2014 07:13:36 +0100</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>Functional testing with cucumber and protractor</title>
        <description>&lt;p&gt;Now I love Behaviour Driven Development I love it for many reasons but my main reason is the way it completes my development process.  TDD allows me to test how my code works to validate that the new function has been implemented correctly, to put me in the mindset of writing minimalist and well structured code and to give me confidence I am not breaking any existing code.  It is not so great at describing behaviour that the system is supposed to exhibit and if you work with an Agile methodology it is a pretty terrible interface between the developer and the customer.&lt;/p&gt;

&lt;h3 id=&quot;what-is-bdd&quot;&gt;What is BDD?&lt;/h3&gt;
&lt;p&gt;BDD was developed by Dan North to create some shared tools that both developers and customers could use.  In an Agile world the product owner or customer can sit with the developers and write the features that describe the behaviour they would like the system to exhibit.  Working in this way it helps the developer to get clarity on the problem and it also helps define a group of statements that can later be used as acceptance criteria.&lt;/p&gt;

&lt;h3 id=&quot;gherkin&quot;&gt;Gherkin&lt;/h3&gt;
&lt;p&gt;The most common implementation is to use the Gherkin language, Gherkin is a domain specific language which uses simple grammer to describe behaviour without having to detail how it is implemented.  Below is a simple example that might define some of the functinality for a login page:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gherkin&quot; data-lang=&quot;gherkin&quot;&gt;&lt;span class=&quot;k&quot;&gt;Feature:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; Login Page&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  As a user of the site&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  I should be able to login&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Scenario:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; Login Page Title&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    Given &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I go on &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;login.html&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Then &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;the title should equal &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Scenario:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; Login With In-Correct Details&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    Given &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I go on &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;login.html&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;When &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I enter incorrect user credentials&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Then &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I should see the message &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Either your username or password are incorrect!&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is no complex code going on here, the feature file reads in simple plain English and the developer has sat with the customer to write this so there is no area for misinterpretation.  This on its own is pretty useful as it’s a nice uniform way to define acceptance criteria.  The real beauty of Gherkin however is when you use it with an automated test suite, this allows the developer to write code using an outside in methodology, repeatedly and predictably testing the implementation.&lt;/p&gt;

&lt;h3 id=&quot;outside-in-development&quot;&gt;Outside in development&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://0.0.0.0:4000/images/post_images/outside-in-development.png&quot; alt=&quot;XCode Build Phases&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The developer starts with the failing feature and then working scenario by scenario incrementally goes about getting the steps to pass.  In order to get the steps to pass they will most likely have to write some failing unit tests and thus some code to satisfy those unit tests.  Once all scenarios in the feature are passing then the acceptance criteria for the story has been met and the story can be considered done.  The bottom line on this process is quality code, but you don’t care about quality right because you love repeating yourself 1000s of times going over the same bug.&lt;/p&gt;

&lt;h3 id=&quot;automated-test-runners&quot;&gt;Automated test runners&lt;/h3&gt;
&lt;p&gt;There are a million and one different test runners that implement Gherkin (Cucumber, RSpec, the original JBehave) therefore it can be used to test everything from raw code, APIs, Websites and Mobile Applications.  Personally I use this approach for all of the afore-mentioned applications and we have even written a specific test runner to test the Starling framework mobile applications.  One of the more common test runners you will find used is Cucumber and other than to bore you about my love for BDD I want to show how Cucumber can be used to test your AngularJS based web applications.&lt;/p&gt;

&lt;h3 id=&quot;enter-angularjs&quot;&gt;Enter AngularJS&lt;/h3&gt;
&lt;p&gt;AngularJS is a Javascript framework for the modern web, it allows you to build dynamic views using a unified and tested framework.   You can data bind your HTML to Restful services using an MVVM model and a whole host of other things which I am not even going to pretend I understand.  One of the great features about Angular is that it has been written from a testability perspective, live services can be easily replaced with test data and it supports dependency injection out of the box so it really helps with writing clean well structured bug free code.&lt;/p&gt;

&lt;h3 id=&quot;angularjs-testing-with-protractor&quot;&gt;AngularJS testing with Protractor&lt;/h3&gt;
&lt;p&gt;So Angular has our unit testing covered but how are we going to test our behaviour, I guess we will just use cucumber and selenium webdriver?  Well you could but it will cause you pain as Angular is an asynchronous framework, just because the page has loaded does not mean that Angular has completed the layout.  This would normally mean you are going to have to handle the load completion yourself, writing lots of ugly unpredictable sleep statements into your tests.  The kind people responsible for Angular have thought about this and created the protractor framework.  Protractor understands Angular directives and its async behaviour so you don’t have to write any extra code.  It gives you the ability to access your repeaters and directives directly so no more messy CSS or DOM selectors.&lt;/p&gt;

&lt;p&gt;If you want to check how many items you have on a page it becomes as simple as the below example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;angularjs homepage todo list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;should add a todo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://www.angularjs.org&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repeater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;todo in todos&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;write a protractor test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;protractor-with-cucumber&quot;&gt;Protractor with Cucumber&lt;/h3&gt;
&lt;p&gt;The above example uses the Jasmine framework, whilst this is fine for developers it’s not the greatest business interface.  Worry not, out of the box Protractor now supports Cucumber, this means you can write your Gherkin files and Cucumber will deal with the interface of these to your javascript specs.  What this gives you is the ability to easily create a framework for testing your application using regular expressions which maximises re-use and retains the all important connection to the customer.&lt;/p&gt;

&lt;p&gt;Consider the below feature file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gherkin&quot; data-lang=&quot;gherkin&quot;&gt;&lt;span class=&quot;k&quot;&gt;Feature:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; Running Cucumber with Protractor&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  As a user of Protractor&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  I should be able to use Cucumber&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  to run my E2E tests&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Scenario:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; Wrapping WebDriver&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    Given &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I go on &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Then &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;the title should equal &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;My AngularJS App&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This translates directly into the javascript implementation file listed below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//http://chaijs.com/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;chai&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//https://github.com/domenic/chai-as-promised/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chaiAsPromised&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;chai-as-promised&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chaiAsPromised&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I go on &amp;quot;([^&amp;quot;]*)&amp;quot;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Write code here that turns the phrase above into concrete actions&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://localhost:9001&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^the title should equal &amp;quot;([^&amp;quot;]*)&amp;quot;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Write code here that turns the phrase above into concrete actions&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventually&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see where I have used words like “index.html” in my feature file this has been replaced with a regular expression in my Javascript.  This means I can re-use this step file anywhere I need to write “Given I go on ‘page.html’”, pretty flexible and pretty awesome.  Ok these steps are not so useful for the business but they are not meant to be this is for you; the feature file is your contract to the business.&lt;/p&gt;

&lt;h3 id=&quot;give-it-a-go-i-dare-you&quot;&gt;Give it a go I dare you&lt;/h3&gt;
&lt;p&gt;Protractor and Cucumber are not without their faults but this is a million steps forward from where we were a year ago.  If you are a developer writing web apps with the Angular framework then you are most likely already using Protractor.  If you are not using Cucumber give it a go and see how it improves your relationship with your customer.  If you are the customer and you are not already using BDD, I can’t recommend it enough. I guarantee you will see positive results with your software quality and a better relationship with your developers.  Like coding, testing is a skill, it’s not easy and takes a little time to learn and implement. Once you have mastered the basics you will never look back.&lt;/p&gt;

&lt;p&gt;For your convenience I have created a simple example which uses a scaffold Angular app, you can get it right here, right now :)&lt;/p&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source Code:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nicholasjackson/protractor-cucumber-example&quot;&gt;https://github.com/nicholasjackson/protractor-cucumber-example&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Sep 2014 01:00:00 +0100</pubDate>
        <link>http://0.0.0.0:4000/agile/bdd/angular/protractor/cucumber/protractor-cucumber/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/agile/bdd/angular/protractor/cucumber/protractor-cucumber/</guid>
        
        
        <category>agile</category>
        
        <category>bdd</category>
        
        <category>angular</category>
        
        <category>protractor</category>
        
        <category>cucumber</category>
        
      </item>
    
      <item>
        <title>Why EE&#39;s new customer service policy could not be more wrong</title>
        <description>&lt;p&gt;EE have just announced that they will be introducing a &lt;a href=&quot;http://www.engadget.com/2014/08/15/ee-lets-queue-jumpers-pay-50p-for-faster-customer-service/&quot;&gt;new service which will allow you to pay 50p extra to jump to the front of the queue&lt;/a&gt; when you dial their customer support line.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-justification-for-this&quot;&gt;What is the justification for this?&lt;/h3&gt;
&lt;p&gt;Before I dive into why this is quite possibly one of the worst ideas that I have heard recently lets look at why EE are doing this.  Their justification is that the additional charge will allow them to open more customer service lines which in turn will improve customer services.&lt;/p&gt;

&lt;h3 id=&quot;that-makes-sense-i-generaly-call-customer-services-because-i-enjoy-it-so-much&quot;&gt;That makes sense I generaly call customer services because I enjoy it so much&lt;/h3&gt;
&lt;p&gt;You don’t though do you?  We generally call customer services for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To report a problem with a service we are already paying for&lt;/li&gt;
  &lt;li&gt;To change a service because we either no longer require it or are disastisfied with it&lt;/li&gt;
  &lt;li&gt;To buy more of the product by adding additional features&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;value-vs-failure-driven-demand&quot;&gt;Value vs Failure driven demand&lt;/h3&gt;
&lt;p&gt;It seems that EE are medicating a problem rather than treating the root cause, this is know in the agile world as &lt;em&gt;Failure Demand&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;failure-demand&quot;&gt;Failure Demand&lt;/h4&gt;
&lt;p&gt;“Failure demand is the demand on the resources of an organisation caused by its own failures.  Support calls, are almost allways failure demand”&lt;/p&gt;

&lt;h4 id=&quot;value-demand&quot;&gt;Value Demand&lt;/h4&gt;
&lt;p&gt;“The primary demand on your organisation should be value demand.  This demand can be in the form of requests for work that will add value from a customer’s perspective”&lt;/p&gt;

&lt;h5 id=&quot;mary-poppendieck-tom-poppendieck---leading-lean-software-development-results-are-not-the-point-2009&quot;&gt;Mary Poppendieck; Tom Poppendieck - Leading Lean Software Development: Results Are Not The Point 2009&lt;/h5&gt;

&lt;p&gt;If more companies examine themselves in this way and remove the need for their customers to complain and focus on &lt;em&gt;Value Demand&lt;/em&gt; they will most certainly have happier customers and most likely show increased profit.  &lt;/p&gt;

&lt;h3 id=&quot;makes-sense-does-it-not&quot;&gt;Makes sense does it not?&lt;/h3&gt;
&lt;p&gt;In the majority of cases it seems not, big business can learn a lot from startup culture, put the people responsible for creating the problems in front of the customer so that they can understand the impact of their mistakes and so they can understand how they can best fix them.  It seems some organisations would much rather take a reactionary approach, concentrating on the efficiency of customer service lines rather than dealing with the reason that customer service exits in the first place.  If you start with the goal of eradicating customer complaints by following a quality focused development model then the remainder of your calls will be value based which instead of being a cost will help generate profit.  &lt;/p&gt;
</description>
        <pubDate>Sat, 16 Aug 2014 11:00:00 +0100</pubDate>
        <link>http://0.0.0.0:4000/agile/ee/why-ee-is-very-wrong/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/agile/ee/why-ee-is-very-wrong/</guid>
        
        
        <category>agile</category>
        
        <category>ee</category>
        
      </item>
    
      <item>
        <title>Swift Unit Tests and Access Modifiers</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;XCode 6 beta 4 introduced access modifiers to &lt;strong&gt;Swift&lt;/strong&gt;, OK access modifiers were in the previous versions but they technically did nothing more than produce a compiler warning.  For those not familiar they are…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Public&lt;/strong&gt; access enables entities to be used within any source file from their defining module, and also in a source file from another module that imports the defining module. You typically use public access when specifying the public interface to a framework.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internal&lt;/strong&gt; access enables entities to be used within any source file from their defining module, but not in any source file outside of that module. You typically use internal access when defining an app’s or a framework’s internal structure.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Private&lt;/strong&gt; access restricts the use of an entity to its own defining source file. Use private access to hide the implementation details of a specific piece of functionality.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;access-modifiers-and-tdd&quot;&gt;Access Modifiers and TDD&lt;/h3&gt;

&lt;p&gt;So we are writing our code following the TDD methodology, we have a class and that class has a method, the function of which we need to write tests for.  When writing object oriented code you should try to only expose the methods that define your usable interface and this should be kept as small as possible.&lt;/p&gt;

&lt;p&gt;We do this because at some point you are going to want to refactor your class and the smaller the impact it has on the rest of your code the simpler it will be to refactor.  What’s that I hear you say, it’s my code and I know what I’m doing so I’m not going to have that problem.  Take it from me you will, even you will forget the function of some classes and methods as your code grows in complexity and this is where the rot sets in.  &lt;/p&gt;

&lt;p&gt;Do your self a favour and follow the below principle:&lt;/p&gt;

&lt;h4 id=&quot;as-public-as-necessary-as-private-as-possible&quot;&gt;“as public as necessary as private as possible”&lt;/h4&gt;

&lt;p&gt;Here some simple swift code and a simple test for it…  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UIKit&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XCTest&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Test&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XCTestCase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Put setup code here. This method is called before the invocation of each test method in the class.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Put teardown code here. This method is called after the invocation of each test method in the class.&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testExample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This is an example of a functional test case.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;XCTAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In XCode the first class would be defined in MyClass.swift and the test defined in TestTests.swift and as of &lt;em&gt;beta 4&lt;/em&gt; the default protection level for classes and methods is &lt;em&gt;Internal&lt;/em&gt;, this used to be &lt;em&gt;Public&lt;/em&gt; in beta 3 and below.&lt;/p&gt;

&lt;p&gt;The default for XCode is that you add your tests classes to the test target and your application classes under test to the application target, the main application then referenced as a target dependency in the XCode build phases panel (see below).
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://0.0.0.0:4000/images/post_images/xcode-tdd-swift.png&quot; alt=&quot;XCode Build Phases&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you run the tests in XCode with this default setup under beta 4+ the code will not even compile as you will be getting unresolved identifier errors.  This is due to the fact that the test target is different to the application target and thus can not access Internal classes and methods.&lt;/p&gt;

&lt;h4 id=&quot;what-are-you-going-to-to-do-about-that-then&quot;&gt;What are you going to to do about that then?&lt;/h4&gt;
&lt;p&gt;Make all the methods public, Objective C had no issue with this right?&lt;br /&gt;
I’m not even going to have this argument, we have already ascertained that access modifiers are good and as an engineer you want to write great code not just working code, don’t you?  Personally I like access modifiers and I think using them in conjunction with a TDD based approach allows you to naturally create good structured code, so drop this idea and find another solution.  I find that if you don’t follow &lt;em&gt;SOLID&lt;/em&gt; principles when writing code it is really difficult to test therefore we can develop a simple rule here when coding….&lt;/p&gt;

&lt;h4 id=&quot;if-its-difficult-to-test-its-probably-not-the-best-code&quot;&gt;“If its difficult to test, its probably not the best code”&lt;/h4&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;
&lt;p&gt;OK, just tell me how to test bloody internal modifiers.  It’s actually quite simple, just add the class under test to the test target’s compile sources list.  It’s possible this requirement will change in a future XCode release but for now its a fairly painless additional step.&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Aug 2014 17:00:00 +0100</pubDate>
        <link>http://0.0.0.0:4000/swift/ios/swift-unit-tests-and-access-modifiers/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/swift/ios/swift-unit-tests-and-access-modifiers/</guid>
        
        
        <category>swift</category>
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>Python Packages and Azure WebJobs</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I had a simple to task to solve of merging two json files so being constantly curious I decided I would hamper any chance of performing this simple task by choosing to review two new technologies, &lt;em&gt;Python&lt;/em&gt; and &lt;em&gt;Azure WebJobs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this post I’m not going to discuss the finer details of &lt;em&gt;Python&lt;/em&gt; but I hope to pass as quick tip regarding using &lt;em&gt;Python&lt;/em&gt; packages with &lt;em&gt;Azure WebJobs&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;using-python-packages-with-azure-webjobs&quot;&gt;Using Python Packages with Azure WebJobs&lt;/h3&gt;
&lt;p&gt;As a &lt;em&gt;Python&lt;/em&gt; programmer you will most likely be familiar with &lt;em&gt;pip&lt;/em&gt; as a noob my lack of familiarity kept me from my bed until 1am.  As it turns out all pip does (most likely a vast understatement) is to download the python package and store it in a location referenced by your &lt;em&gt;PYTHONPATH&lt;/em&gt;.  Since most Python packages are only collections of organised .py files these could be located anywhere as long as your &lt;em&gt;PYTHONPATH&lt;/em&gt; has reference to them.&lt;/p&gt;

&lt;p&gt;This turned out to be the key in working out how to use &lt;em&gt;Python&lt;/em&gt; packages with &lt;em&gt;Azure WebJobs&lt;/em&gt;, you can’t use pip so the package must be uploaded as part of the WebJob package.&lt;/p&gt;

&lt;h4 id=&quot;step-1&quot;&gt;Step 1.&lt;/h4&gt;
&lt;p&gt;If you are using OSX and the default Python 2.7 install your packages installed with pip will be in&lt;br /&gt;
&lt;code&gt;/usr/local/lib/python2.7/site-packages&lt;/code&gt;, create a folder called &lt;code&gt;site-packages&lt;/code&gt; in the root of your python job and copy any packages you need for your job into it.&lt;/p&gt;

&lt;h4 id=&quot;step-2&quot;&gt;Step 2&lt;/h4&gt;
&lt;p&gt;Next you need to modify your run.py or any other file which requires access to the package files.  At the top of the file add….  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;site-packages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-3&quot;&gt;Step 3&lt;/h4&gt;
&lt;p&gt;Zip all this up and upload as a WebJob or alternatively if you have previously created a job upload the files over FTP.&lt;/p&gt;

&lt;h4 id=&quot;step-4&quot;&gt;Step 4&lt;/h4&gt;
&lt;p&gt;Sit back watch it all explode in a ball of fire, call me all maner of names for mixing a step, revert to Stack Overflow.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Aug 2014 13:12:32 +0100</pubDate>
        <link>http://0.0.0.0:4000/azure/python/python-packages-and-azure-webjobs/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/azure/python/python-packages-and-azure-webjobs/</guid>
        
        
        <category>azure</category>
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Things that make my head hurt</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 08 Aug 2014 17:40:20 +0100</pubDate>
    <lastBuildDate>Fri, 08 Aug 2014 17:40:20 +0100</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>Swift Unit Tests and Access Modifiers</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;XCode 6 beta 4 introduced access modifiers to &lt;strong&gt;Swift&lt;/strong&gt;, OK access modifiers were in the previous versions but they technically did nothing more than a compiler warning.  For those not familiar they are…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Public&lt;/strong&gt; access enables entities to be used within any source file from their defining module, and also in a source file from another module that imports the defining module. You typically use public access when specifying the public interface to a framework.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internal&lt;/strong&gt; access enables entities to be used within any source file from their defining module, but not in any source file outside of that module. You typically use internal access when defining an app’s or a framework’s internal structure.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Private&lt;/strong&gt; access restricts the use of an entity to its own defining source file. Use private access to hide the implementation details of a specific piece of functionality.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;access-modifiers-and-tdd&quot;&gt;Access Modifiers and TDD&lt;/h3&gt;

&lt;p&gt;So we are writing our code following the TDD methodology, we have a class and that class has a method, the function of which we need to write tests for.  When writing object oriented code you should try to only expose the methods that define your usable interface and this should be kept as small as possible.&lt;/p&gt;

&lt;p&gt;We do this because at some point you are going to want to refactor your class and the smaller the impact it has on the rest of your code the faster it will be to perform this operation.  What’s that I hear you say, its my code and I know what I’m doing so I’m not going to have that problem.  Take it from me you will, even you will forget the function of some classes and methods as your code grows in complexity and this is where the rot sets in.  &lt;/p&gt;

&lt;p&gt;Do your self a favour and follow the principles:&lt;/p&gt;

&lt;h4 id=&quot;as-public-as-necessary-as-private-as-possible&quot;&gt;“as public as necessary as private as possible”&lt;/h4&gt;

&lt;p&gt;Here some simple swift code and a test for it…  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UIKit&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XCTest&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Test&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XCTestCase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Put setup code here. This method is called before the invocation of each test method in the class.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Put teardown code here. This method is called after the invocation of each test method in the class.&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testExample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This is an example of a functional test case.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;XCTAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you were writing this in a XCode the first class would be defined in MyClass.swift and the test defined in TestTests.swift and from &lt;em&gt;beta 4&lt;/em&gt; the default protection level for classes and methods is &lt;em&gt;Internal&lt;/em&gt;, this used to be &lt;em&gt;Public&lt;/em&gt; in beta 3 and below.&lt;/p&gt;

&lt;p&gt;The default for XCode is that you add your tests to be compile to the test target and your classes under test to the application target, the main application is referenced as a Target Dependency in the XCode build phases panel (see below).
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/post_images/xcode-tdd-swift.png&quot; alt=&quot;XCode Build Phases&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you run the tests in XCode with this default setup under beta 4+ the code will not even compile as you will be getting unresolved identifier errors.  This is due to the fact that the test target is different to the application target and thus can not access Internal classes and methods.&lt;/p&gt;

&lt;h4 id=&quot;what-are-you-going-to-to-do-about-that-then&quot;&gt;What are you going to to do about that then?&lt;/h4&gt;
&lt;p&gt;Make all the methods public, Objective C had no issue with this right?&lt;br /&gt;
I’m not even going to have this argument again but personally I like access modifiers and I think using them in conjunction with a TDD based approach allows you to naturally create good structured code.&lt;/p&gt;

&lt;h4 id=&quot;if-its-difficult-to-test-its-probably-not-the-best-code&quot;&gt;“If its difficult to test, its probably not the best code”&lt;/h4&gt;

&lt;p&gt;OK, just tell me how to test bloody internal modifiers.  It’s actually quite simple, just add the class under test to the test target’s compile sources list.  It’s possible this requirement will change in a future XCode release but for now its a fairly painless additional step.&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Aug 2014 17:00:00 +0100</pubDate>
        <link>/swift/ios/swift-unit-tests-and-access-modifiers/</link>
        <guid isPermaLink="true">/swift/ios/swift-unit-tests-and-access-modifiers/</guid>
        
        
        <category>swift</category>
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>Python Packages and Azure WebJobs</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I had a simple to task to solve of merging two json files so being constantly curious I decided I would hamper any chance of performing this simple task by choosing to review two new technologies, &lt;em&gt;Python&lt;/em&gt; and &lt;em&gt;Azure WebJobs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this post I’m not going to discuss the finer details of &lt;em&gt;Python&lt;/em&gt; but I hope to pass as quick tip regarding using &lt;em&gt;Python&lt;/em&gt; packages with &lt;em&gt;Azure WebJobs&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;using-python-packages-with-azure-webjobs&quot;&gt;Using Python Packages with Azure WebJobs&lt;/h3&gt;
&lt;p&gt;As a &lt;em&gt;Python&lt;/em&gt; programmer you will most likely be familiar with &lt;em&gt;pip&lt;/em&gt; as a noob my lack of familiarity kept me from my bed until 1am.  As it turns out all pip does (most likely a vast understatement) is to download the python package and store it in a location referenced by your &lt;em&gt;PYTHONPATH&lt;/em&gt;.  Since most Python packages are only collections of organised .py files these could be located anywhere as long as your &lt;em&gt;PYTHONPATH&lt;/em&gt; has reference to them.&lt;/p&gt;

&lt;p&gt;This turned out to be the key in working out how to use &lt;em&gt;Python&lt;/em&gt; packages with &lt;em&gt;Azure WebJobs&lt;/em&gt;, you can’t use pip so the package must be uploaded as part of the WebJob package.&lt;/p&gt;

&lt;h4 id=&quot;step-1&quot;&gt;Step 1.&lt;/h4&gt;
&lt;p&gt;If you are using OSX and the default Python 2.7 install your packages installed with pip will be in&lt;br /&gt;
&lt;code&gt;/usr/local/lib/python2.7/site-packages&lt;/code&gt;, create a folder called &lt;code&gt;site-packages&lt;/code&gt; in the root of your python job and copy any packages you need for your job into it.&lt;/p&gt;

&lt;h4 id=&quot;step-2&quot;&gt;Step 2&lt;/h4&gt;
&lt;p&gt;Next you need to modify your run.py or any other file which requires access to the package files.  At the top of the file add….  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;site-packages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-3&quot;&gt;Step 3&lt;/h4&gt;
&lt;p&gt;Zip all this up and upload as a WebJob or alternatively if you have previously created a job upload the files over FTP.&lt;/p&gt;

&lt;h4 id=&quot;step-4&quot;&gt;Step 4&lt;/h4&gt;
&lt;p&gt;Sit back watch it all explode in a ball of fire, call me all maner of names for mixing a step, revert to Stack Overflow.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Aug 2014 13:12:32 +0100</pubDate>
        <link>/azure/python/python-packages-and-azure-webjobs/</link>
        <guid isPermaLink="true">/azure/python/python-packages-and-azure-webjobs/</guid>
        
        
        <category>azure</category>
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>
